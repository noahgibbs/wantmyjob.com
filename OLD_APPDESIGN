         APPLICATION TECHNICAL DESIGN

STRUCTURE FOR QUESTIONS ANSWERED

An 'employee' question can be answered once per profile.  A 'company'
  question can be answered once per employer.  So if a profile has had
  J total jobs, and answered E employee questions, and JC[n] company
  questions (for n = 1 to J), we're looking at potentially significant
  storage space.  Having a single 'answers' array means that people with
  many jobs, even those who have answered few questions, will use up
  a lot of database space.

So a better answer may be to have a list of answer arrays.  The first
  element will be the employee questions, followed by J job question
  arrays.  Or perhaps there will be separate pointers for the employee
  answers and list of company answers.  This will allow space savings
  since only answered or skipped questions will take up room in the
  database.

Each answer must select between "skipped" and one of up to five answers.
  Further, there must be an importance assigned (four values?) and
  'dream job' questions need up to five booleans for checkboxes for
  the answers for the dream job.  Say that "skipped" and five answers
  (six choices) take up three bits between them.  Then say that the
  five booleans take up five bits.  That's a single byte, with *no*
  room for expansion unless it replaces the profile's own answer.

So maybe an answers_blob-type item encoded that way?  There would be
  a single one for the employee answers, and potentially many for the
  company answers.  Other question types in the future could have their
  own as well.  Not clear how the has_one plus has_many would work...

Maybe just have an integer for which job number it is, and have "0" mean
  employee questions, later set high bit(s) to mean other question
  types?  So it's an int-plus-bitfield arrangement, and 0 is special?
